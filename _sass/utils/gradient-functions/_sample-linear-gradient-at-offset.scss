
@import "polyfills/math-div.scss";
@import "./resolve-linear-gradient-offset.scss";

@function sample-linear-gradient-at-offset($parsed-gradient, $offset, $unit-lengths) {
   $stops: map-get($parsed-gradient, "stops");
   @if length($stops) == 1 {
      @return nth(nth($stops, 1), 1);
   }
   
   $i: 1;
   @while $i < length($stops) {
      $stop: nth($stops, $i);
      $next: nth($stops, $i + 1);
      
      $offset-a: resolve-linear-gradient-offset(nth($stop, 2), $unit-lengths);
      $offset-b: resolve-linear-gradient-offset(nth($next, 2), $unit-lengths);
      
      @if $i == 0 and $offset < $offset-a {
         @return nth($stop, 1);
      }
      @if $offset >= $offset-a and $offset <= $offset-b {
         @if $offset == $offset-a {
            @return nth($stop, 1);
         }
         
         $distance-a: $offset   - $offset-a;
         $distance-b: $offset-b - $offset;
         $sum:        $offset-b - $offset-a;
         
         $color-a: nth($stop, 1);
         $color-b: nth($next, 1);
         
         $mix: math-div($distance-b, $sum);
         $mix: $mix * 100%;
         
         @return mix($color-a, $color-b, $mix);
      }
      @if $i == length($stops) and $offset > $offset-b {
         @return nth($next, 1);
      }
      
      $i: $i + 1;
   }
   @return #00000000;
}