
@import "utils/cast-to-color.scss";
@import "utils/cast-to-number.scss";
@import "utils/remove-unit.function.scss";

///
///   fix-gradient-stop-list
///
///      Given a list of stops, where each stop is a list where the first element 
///      is meant to be a color, and the second element is a position or null, 
///      this function performs fix-up steps similar to those specified in CSS. 
///      Specifically:
///
///       - The first element's type is manually converted to a color, in case it 
///         is currently a string that resembles a color.
///
///       - Any positions that are present are manually converted to numbers, in 
///         case any of them are currently strings that resemble numbers.
///
///       - If the first stop lacks a position, it is given position 0.
///
///       - If the last stop lacks a position, it is given position 100%.
///
///       - For any contiguous group of N many stops which lack positions, we grab 
///         the preceding and following stops, identify the span between them, and 
///         place the N un-positioned stops within that span at even spacing.
///
@function fix-gradient-stop-list($stops) {
   $result: ();
   
   $i:          1;
   $i-last-pos: null;
   @while $i <= length($stops) {
      $stop: nth($stops, $i);
      
      $pos: null;
      
      // ensure proper typing
      $stop: set-nth($stop, 1, cast-to-color(nth($stop, 1)));
      
      // pos
      @if $pos == null {
         @if $i-last-pos == null {
            $stop: set-nth($stop, 2, 0);
            $i-last-pos: $i;
         }
         @if $i == length($stops) {
            $stop: set-nth($stop, 2, 100%);
         }
      } @else {
         $pos:  cast-to-number($pos); // ensure proper typing
         $stop: set-nth($stop, 2, $pos);
         
         @if $i-last-pos != null and $i-last-pos < $i - 1 {
            $per: $i - $i-last-pos;
            $per: remove-unit($i-last-pos) / $per;
            
            $from: nth(nth($result, $i-last-pos), 2);
            
            $j: $i-last-pos + 1;
            @while $j < $i {
               $k: $j - $i-last-pos;
               
               $revised: nth($result, $j);
               $revised: set-nth($revised, 2, $from + $per * $k);
               $result:  set-nth($result,  $j, $revised);
               
               $j: $j + 1;
            }
         }
         $i-last-pos: $i;
      }
      $stop: join($stop, (), comma);
      
      $i: $i + 1;
      
      $result: append($result, $stop);
   }
   @return join((), $result, comma);
}