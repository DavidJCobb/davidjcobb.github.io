
// based on:
// https://kittygiraudel.com/2014/01/15/casting-a-string-to-a-number-in-sass/
@function cast-to-number($string, $base: 10) {
   @if type-of($string) == "number" {
      @return $string;
   }
   
   $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
   $numbers: 0 1 2 3 4 5 6 7 8 9;
   
   @if $base < 10 {
      $s: ();
      $n: ();
      @for $i from 1 through $base {
         $s: append($s, nth($strings, $i));
         $n: append($n, nth($numbers, $i));
      }
      $strings: $s;
      $numbers: $n;
   } @else if $base > 10 {
      @if $base > 16 {
         @warn "base too high";
         @return false;
      }
      
      $s: 'A' 'B' 'C' 'D' 'E' 'F';
      $n: 10 11 12 13 14 15;
   
      @for $i from 10 through $base - 1 {
         $strings: append($strings, nth($s, $i - 9));
         $numbers: append($numbers, nth($n, $i - 9));
      }
   }
   
   $result: 0;
   @for $i from 1 through str-length($string) {
      $character: str-slice($string, $i, $i);
      $index:     index($strings, $character);

      @if not $index {
         @if $character == "%" and $i == str-length($string) {
            $result: $result * 1%;
            @return $result;
         } @else if $character == "-" and $i == 1 {
            $result: $result * -1;
         } @else {
            @warn "Unknown character `#{$character}`.";
            @return false;
         }
      }

      $number: nth($numbers, $index);
      $result: $result * $base + $number;
   }
   @return $result;
}