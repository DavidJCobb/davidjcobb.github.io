
@import "utils";
@import "theme-mixins";
@import "fonts";
@import "syntax-highlighting";

$cobb-enable-code-styles: false !default;
$cobb-enable-table-styles: false !default;

$cobb-common-visual-was-imported: false !default;
@if not $cobb-common-visual-was-imported { /* start include guard */
$cobb-common-visual-was-imported: true;

$code-block-back-color: #F8F8F8;
/*
   NOTE: Overridden on mobile, when we drop back to a border-image instead of several 
   box-shadows. No way to make that configurable; see explanation at the relevant code.
*/

$mobile-styled-scrollbar-thickness: .4rem;
$mobile-styled-scrollbar-margin:    .4rem;

:root {
   color-scheme: light;
}

[hidden] {
   display: none !important;
}

a:link { color:#0066cc; }
a:link:visited,
a:visited { color:#801490; }

@if $cobb-enable-code-styles {
   code, pre {
      font-family: $theme-code-font-family;
   }
} @else {
   code {
      font-family: $theme-code-font-family;
   }
}

h1, h2, h3, h4, h5, h6 {
   font-family: $theme-header-font-family;
}
h1 { font-size:2.00rem; }
h2 { font-size:1.75rem; }
h3 { font-size:1.50rem; }
h4 { font-size:1.35rem; }
h5 { font-size:1.25rem; }
h6 { font-size:1.10rem; }
:is(h1,h2,h3,h4,h5,h6) {
   line-height:1.2em;
}
h1, h2 {
   margin:0.83em 0;
}
h3, h4, h5, h6 {
   margin:1.00em 0;
}

:is(ol, ul)>li {
   margin:1em 0;
}
p{margin:1em 0}

@if $cobb-enable-code-styles {
   pre {
      /*background:$code-block-back-color;*/
      border-radius:1rem;
      /*@include content-card-shadow(true);*/
      
      overflow-x:auto;
      
      $pre-vertical-padding: 1rem;
      
      padding:$pre-vertical-padding 1.5rem;
      margin:1em 0;
      line-height:1.2em;
      
      /*
         below: a disgusting hack, to work around the fact that inset box-shadows are 
         covered by an element's horizontal scrollbar rather than being moved above 
         them.
         
         we use linear gradients to mimic the effect of an inset box-shadow on the 
         element's bottom edge; this handles the case of a horizontal scrollbar being 
         present.
         
         when a horizontal scrollbar is not present, then we want our normal box-shadows 
         (since they adapt to border-radius), so we use two sets of box-shadows: the 
         normal one; and a set of white shadows, to cancel out the effect of the linear 
         gradient backgrounds. (otherwise, both the box-shadows and backgrounds would 
         cover the same spot, resulting in a doubly dark shadow.)
      */
      
      $shadow-alphas: 0.05, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08;
      $shadow-begins:    0,  5px,  6px,  8px, 10px, 20px, 30px;
      $shadow-blurs:   4px,  6px,  8px, 10px, 12px, 24px, 36px;
      
      $sha-bg-layers: ();
      $shadow-layers: ();
      $negate-layers: ();
      $shadow-inset:  true;
      @for $i from 1 through length($shadow-alphas) {
         $s: 0%;
         $a: nth($shadow-alphas, $i);
         $y: nth($shadow-begins, $i);
         $l: nth($shadow-blurs,  $i);
         
         $shadow-layers: append($shadow-layers, unquote("inset 0 #{$y} #{$l} rgba(0, 0, 0, #{$a})"), comma);
         $negate-layers: append($shadow-layers, unquote("inset 0 -#{$y} #{$l} rgba(255, 255, 255, #{$a})"), comma);
         
         $proceed: true;
         @if $y > $l {
            $proceed: false;
         }
         $a: $a * remove-unit($y / remove-unit($y + $l));
         $l: #{$l - $y};
         $y: 0;
      
         @if $proceed {
            $sha-bg-layers: append($sha-bg-layers, unquote("local bottom center linear-gradient(to top, rgba(0,0,0,#{$a}) 0, transparent #{$l})"), comma);
            $l: $l + 1px;
         }
      }
      
      box-shadow: join($shadow-layers, $negate-layers);
      background: $sha-bg-layers, $code-block-back-color;
      
      @include for-smartphones-only {
         /*
            Having too many box-shadows on-screen at one time can cause lag for weaker devices, 
            such as smartphones. The box shadows above are especially bad, so we'll drop them 
            back on weaker devices.
         */
         
         background: transparent none;
         /*
            Ordinarily, we'd use #F4F4F4 here -- a slightly darker shade, to account for the 
            fact that the border-image doesn't reach as far as the box-shadows. However, due 
            to crbug.com/1426649, we cannot have both a border-image and a background on a 
            scrollable element that uses the white-space property. Our solution is to encode 
            the background color directly into the border-image and use the `fill` specifier.
         */
         
         $slice-top:    37;
         $slice-side:   27;
         $slice-bottom: 16;
         
         $show-top:    $slice-top    * 0.0625 * 1rem;
         $show-side:   $slice-side   * 0.0625 * 1rem;
         $show-bottom: $slice-bottom * 0.0625 * 1rem;
         
         $show-min-height: $show-top + $show-bottom;
         
         box-shadow: none;
         border:1px solid transparent; /* crbug.com/1417526 */
         border-image: url("./inset-shadow-pre.svg") #{$slice-top} #{$slice-side} #{$slice-bottom} fill / #{$show-top} #{$show-side} #{$show-bottom} / 0;
         min-height:calc(#{$show-min-height} - 2px - #{2 * $pre-vertical-padding});
         
         /* Ruby Sass doesn't support newer techniques, is unmaintained, and therefore never will */
         /*@supports selector(::-webkit-scrollbar) {*/
            $scrollbar-inset: 1.1rem; /* = border radius of the PRE plus a little extra */
            
            &::-webkit-scrollbar,
            &::-webkit-scrollbar-track {
               height: $mobile-styled-scrollbar-thickness + $mobile-styled-scrollbar-margin * 2;
            }

            &::-webkit-scrollbar-track {
               margin:0 $scrollbar-inset;
               background: rgba(0, 0, 0, 0.1);
               @include webkit-scrollbar-rounding-and-margin($mobile-styled-scrollbar-margin);
            }

            &::-webkit-scrollbar-thumb {
               @include webkit-scrollbar-rounding-and-margin($mobile-styled-scrollbar-margin);
               background: rgba(0, 0, 0, 0.5);
            }
         /*}*/
      }
   }
   figure.highlight { /* generated by Jekyll/Rouge syntax highlighting */
      display:contents;
   }
   @include for-firefox-only {
      .highlight>pre>code {
         /*
            in Firefox only, horizontal scrolling completely nullifies padding-right unless 
            the sole child is inline-block. apparently Firefox botched this way back in the 
            Neolithic era, so until they and the CSSWG finish cleaning up the mess, we have 
            to do this hack. lucky for us, the Rouge syntax highlighter automatically wraps 
            all content in both a FIGURE.highlight, a PRE, and a CODE,  so we actually have 
            an element we can use.
            
               https://github.com/w3c/csswg-drafts/issues/129
               https://bugzilla.mozilla.org/show_bug.cgi?id=1700858
         */
         display:inline-block;
         padding-right:inherit;
      }
   }
}

@if $cobb-enable-table-styles {
   table:not(.no-default-styles) {
      margin:1rem auto;
      
      border:1px solid #000;
      border-radius:1em;
      @include border-collapse(
         $radius: 1em,
         $separate-cells-from-tables: false,
         $override-cell-table-border: 1px solid #444
      );
      background:#777;
      padding:3px;
      
      th, td {
         border:1px solid #DDD;
         padding:.25em .75em;
      }
      th {
         border:1px solid #666;
         background:#FF7400;
         font-weight: bold;
      }
      
      /// Shade every other row.
      tbody>tr {
         /*
            We can't apply the background color to the TR directly, as in Firefox, that will 
            break a table's border-radius  if we use $separate-cells-from-tables above.  The 
            problem is that the  TR isn't rounded,  so it protrudes in  front of the table's 
            background.
         */
         >:is(td, th) {
            background:#FFF;
         }
         
         &:nth-of-type(2n+1) {
            >:is(td, th) {
               background:#F8F8F8;
            }
            
            td {
               border-left-color:#CCC;
               border-right-color:#CCC;
            }
         }
      }
      
      td[data-type=number] {
         text-align:right;
      }
      
      >tbody>tr>th:first-child:last-of-type {
         vertical-align:top;
         background:#444;
         color:#ECE7E0;
      }
      
      &.fade-zeroes td[data-type="number"][data-value="0"],
      td.deemphasize {
         color:#666;
      }
   }
   
   :is(table.primarily-text, .table-wrapper.primarily-text>table) :is(td, th) {
      vertical-align: top;
   }
   
   .table-wrapper {
      max-width:  100%;
      overflow-x: auto;
      margin:1rem 0;
      
      >table {
         width: max-content;
         max-width: 150vw; /* or else cols word-wrap to the computed widths of headers' contents (width on TH can't enlarge) */
         margin: 0 auto;
      }
      
      &.primarily-text>table {
         width: auto;
         
         @include for-smartphones-only-portrait {
         /*
            This is a hack. What we want is to detect when the text size is at a given 
            proportion relative to the width of the body area (which is always 960px), 
            and allow the table to expand and overflow (with scrolling) when the text 
            is large relative to the page it's on; this will generally occur on mobile 
            browsers, but could occur on other types of devices as well.
            
            Media queries can't really achieve that; we can check the width of the 
            screen (which won't match the body area for desktop user agents with the 
            window narrowed) and we can compare it to sizes in pixels or ems (but we 
            can't compare those pixel and em sizes *to each other*).
            
            The solution, then, is to give up and just toss these styles at every 
            smartphone in portrait orientation.
         */
         
            width: max-content;
            col.body-text {
               width: 40em;
            }
         }
      }
      
      @include for-smartphones-only {
         padding-bottom: .4rem;
      
         &::-webkit-scrollbar,
         &::-webkit-scrollbar-track {
            //height: $mobile-styled-scrollbar-thickness + $mobile-styled-scrollbar-margin * 2;
            height: $mobile-styled-scrollbar-thickness;
         }

         &::-webkit-scrollbar-track {
            //margin:0 0;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 5rem;
            //@include webkit-scrollbar-rounding-and-margin($mobile-styled-scrollbar-margin);
         }

         &::-webkit-scrollbar-thumb {
            //@include webkit-scrollbar-rounding-and-margin($mobile-styled-scrollbar-margin);
            background: rgba(0, 0, 0, 0.5);
            border-radius: 5rem;
         }
      }
   }
}

*:first-child{margin-top:0}
*:last-child{margin-bottom:0}

///
/// For articles:
///

$cobb-display-error-sentinels-for-blind: false !default;
.different-wording-for-the-blind {
   &>.sighted {}
   &>.blind {
      @include screen-reader;
   }
   
   @if $cobb-display-error-sentinels-for-blind {
      ///
      /// Error checks:
      ///
      &>.sighted:not([aria-hidden=true]) {
         &::before {
            content:"BUG: THIS CONTENT SHOULD BE MARKED ARIA-HIDDEN";
            padding:.25em .5em;
            display:inline-block;
            background:red;
            color:white;
            font-weight:bold;
         }
      }
      &>.sighted:first-child:last-child {
         &::after {
            content:"BUG: NO CONTENT OFFERED FOR SCREEN READERS";
            padding:.25em .5em;
            display:inline-block;
            background:red;
            color:white;
            font-weight:bold;
         }
      }
   }
}

//
// Specific theming and site layout
//

html {
   @include theme-background();
}
body{
   font-family: $theme-body-font-family;
   line-height:1.7em;
   
   margin:0;
   padding:0 0 7rem 0;
}
   #content {
      width:960px;
      margin:0 auto;
      
      >header{
         h1{
            font-size:2.5rem;
            font-weight:bold;
         }
      }
   }
      main{flex:1 1 760px}

.grand-header {
   text-align:center;
   margin:4rem 0;
   color:#FFFFFF;
   
   // Overlaying several subtle shadows results in a softer, gentler look:
   text-shadow:
       0   0  2px #000000,
       0   0  3px #000000,
       2px 0  4px rgba(0, 0, 0, 0.30),
      -2px 0  4px rgba(0, 0, 0, 0.30),
       4px 0  6px rgba(0, 0, 0, 0.20),
      -4px 0  6px rgba(0, 0, 0, 0.20),
       8px 0  8px rgba(0, 0, 0, 0.15),
      -8px 0  8px rgba(0, 0, 0, 0.15),
      12px 0 12px rgba(0, 0, 0, 0.10),
     -12px 0 12px rgba(0, 0, 0, 0.10);
   
   &.no-descenders {
      line-height:1.7rem;
   }
   
   code {
      background: unpack-backgrounds( append( (), $theme-scanline-background-layer, comma) ), rgba(255, 255, 255, 0.16);
      padding:.3ch calc(.3ch + 3px);
      margin:0 -.3ch;
      border-radius:.5rem;
      color:#F4F8FF;
      
      position:relative;
      &::after {
         content:"";
         border-radius:inherit;
         position:absolute;
         inset:2px;
         border:3px solid rgba(0, 0, 0, 0.16);
         user-select:none;
         pointer-events:none;
         z-index:-1;
      }
   }
}
.grand-header-cluster .grand-header {
   line-height:1.2em;

   &:not(:last-child) {
      margin-bottom:0;
   }
   &:not(:first-child) {
      margin-top:.5rem;
   }
}

main>section {
   @include content-card;
   
   &>:first-child:is(h1, h2, h3, h4, h5, h6) {
      padding-top:1rem;
   }
   &>:first-child:is(h1, h2, h3, h4, h5, h6)~*:last-child {
      margin-bottom:1rem;
   }
   
   // spacing
   &+section {
      margin-top:4rem;
   }
}

body>footer {
   margin-top:7rem;
   text-align:center;
   
   ul {
      display:flex;
      flex-flow:row nowrap;
      justify-content:center;
      gap: 2em;
      width:min-content;
      
      list-style:none;
      padding:0;
      margin:0 auto;
   }
   li {
      margin:0;
   }
   a {
      display:block;
      padding:.25em 1em;
      
      @include content-card-shadow(false);
      background:$card-back-color;
      border-radius:$card-corner-size;
      
      text-transform:lowercase;
      text-decoration:none;
      
      transition-property:box-shadow;
      transition-duration: 0.2s; // fast mouseout anim
      &:hover {
         transition-duration: 1s; // medium-speed mouseover anim
         box-shadow: 
            0 0 6px #FFF,
            0 .5em 12px #FFFFFFA0,
            0 .5em 24px #FFFFFF80,
            0 -1em 32px #FFFFFF60,
            .5em -.75em 32px #FFFFFF60,
            -.5em -.75em 32px #FFFFFF60
         ;
      }
   }
}
@media (prefers-reduced-motion) {
   body>footer a {
      transition-duration:0!important;
   }
}

@include for-smartphones-only-portrait {
   // text size tweaks
   html {
      font-size:clamp(1rem, calc(1rem + 1vh), 2.5rem);
   }
   
   body>footer ul {
      flex-flow:column nowrap;
      justify-content:initial;
   }
}

/* end include guard */ }