
/* polyfills: */

@function map-set($map, $key, $value) {
   @return map-merge($map, ($key: $value));
}

/* near-polyfills: */

@function list-prepend($list, $item) {
   $result: ();
   $result: append($result, $item);
   @each $prior in $list {
      $result: append($result, $prior);
   }
   @return $result;
}

/* custom: */

@function apply-all-to($properties, $list) {
   $result: ();
   @each $item in $list {
      $result: append($result, map-merge($item, $properties), comma);
   }
   @return $result
}

@function remove-unit($number) {
   @if type-of($number) == "number" and not unitless($number) {
      @return $number / ($number * 0 + 1);
   }
   @return $number;
}

@function text-shadows-for-outline($color) {
   $text-shadows: ();
   @for $x from -1 through 1 {
      @for $y from -1 through 1 {
         @if $x != 0 or $y != 0 {
            $text-shadows: append(
               $text-shadows,
               #{$x * 2}px #{$y * 2}px 1px #{$color},
               comma
            );
         }
      }
   }
   @return $text-shadows;
}

@function unpack-backgrounds($list) {
   $result: ();
   
   $properties-defaults: (
      "attach":   "scroll",
      "position": "left top",
      "repeat":   "repeat",
      "size":     "auto",
   );
   
   $properties-present: ();
   @each $key, $default in $properties-defaults {
      $properties-present: map-set($properties-present, $key, false);
   }
   @each $item in $list {
      @each $key, $default in $properties-defaults {
         @if map-has-key($item, $key) {
            $properties-present: map-set($properties-present, $key, true);
            /*
               Background-size cannot be specified in bulk without background-position.
            */
            @if $key == "size" {
               $properties-present: map-set($properties-present, "position", true);
            }
         }
      }
   }
   
   @each $item in $list {
      $entry: "";
      @if map-has-key($item, "attach") {
         $entry: $entry + " " + map-get($item, "attach");
      }
      
      @if map-has-key($item, "position") {
         $entry: $entry + " " + map-get($item, "position");
         @if map-has-key($item, "size") {
            $entry: $entry + "/" + map-get($item, "size");
         }
      } @else if map-has-key($item, "size") {
         $entry: $entry + " left top/" + map-get($item, "size");
      }
      
      @if map-has-key($item, "image") {
         $entry: $entry + " " + map-get($item, "image");
      }
      
      $result: append(
         $result,
         unquote($entry),
         comma
      );
   }
   @return $result;
}

@function wrap-items-in-key($key, $list...) {
   $result: ();
   @each $item in $list {
      $result: append($result, (
         $key: quote($item)
      ));
   }
   @return $result
}

@mixin for-firefox-only {
   @-moz-document url-prefix() {
      @content;
   }
}
@mixin exclude-firefox {
   @supports (text-size-adjust: none) or (text-decoration-skip: none) {
      @content;
   }
}

/*
   styles for smartphones. there's no good query for these, so we have 
   to go with:
   
    - device has a screen
    - device does not have a pointer that can "hover" over things
    - maximum aspect ratio ensures we only affect portrait orientation
    
*/
@mixin for-smartphones-only {
   @media only screen and (any-hover: none) and (pointer: coarse),
          only screen and (any-hover: none) and (pointer: none) {
      @content;
   }
}
@mixin for-smartphones-only-portrait {
   @media only screen and (any-hover: none) and (pointer: coarse) and (max-aspect-ratio:3/5),
          only screen and (any-hover: none) and (pointer: none)   and (max-aspect-ratio:3/5) {
      @content;
   }
}

@mixin screen-reader {
   position:absolute;
   left:-100vw;
   top:auto;
   width:1px;
   height:1px;
}