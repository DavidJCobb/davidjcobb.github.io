
// polyfills:

@function map-set($map, $key, $value) {
   @return map-merge($map, ($key: $value));
}

// near-polyfills:

@function list-prepend($list, $item) {
   $result: ();
   $result: append($result, $item);
   @each $prior in $list {
      $result: append($result, $prior);
   }
   @return $result;
}

// custom:

@function apply-all-to($properties, $list) {
   $result: ();
   @each $item in $list {
      $result: append($result, map-merge($item, $properties), comma);
   }
   @return $result
}

@function remove-unit($number) {
   @if type-of($number) == "number" and not unitless($number) {
      @return $number / ($number * 0 + 1);
   }
   @return $number;
}

@function str-replace($string, $substring, $target) {
   $i: str-index($string, $substring);
   @while $i != null {
      $head: str-slice($string, 0, $i);
      $tail: str-slice($string, $i + str-length($substring));
      
      $substring: str-insert($head, $target, -1);
      $substring: str-insert($substring, $tail, -1);
   
      $i: str-index($string, $substring);
   }
   @return $substring;
}

@function text-shadows-for-outline($color) {
   $text-shadows: ();
   @for $x from -1 through 1 {
      @for $y from -1 through 1 {
         @if $x != 0 or $y != 0 {
            $text-shadows: append(
               $text-shadows,
               #{$x * 2}px #{$y * 2}px 1px #{$color},
               comma
            );
         }
      }
   }
   @return $text-shadows;
}

@function unpack-backgrounds($list) {
   $result: ();
   
   $properties-defaults: (
      "attach":   "scroll",
      "position": "left top",
      "repeat":   "repeat",
      "size":     "auto",
   );
   
   $properties-present: ();
   @each $key, $default in $properties-defaults {
      $properties-present: map-set($properties-present, $key, false);
   }
   @each $item in $list {
      @each $key, $default in $properties-defaults {
         @if map-has-key($item, $key) {
            $properties-present: map-set($properties-present, $key, true);
            /*
               Background-size cannot be specified in bulk without background-position.
            */
            @if $key == "size" {
               $properties-present: map-set($properties-present, "position", true);
            }
         }
      }
   }
   
   @each $item in $list {
      $entry: "";
      @if map-has-key($item, "attach") {
         $entry: $entry + " " + map-get($item, "attach");
      }
      
      @if map-has-key($item, "position") {
         $entry: $entry + " " + map-get($item, "position");
         @if map-has-key($item, "size") {
            $entry: $entry + "/" + map-get($item, "size");
         }
      } @else if map-has-key($item, "size") {
         $entry: $entry + " left top/" + map-get($item, "size");
      }
      
      @if map-has-key($item, "image") {
         $entry: $entry + " " + map-get($item, "image");
      }
      
      $result: append(
         $result,
         unquote($entry),
         comma
      );
   }
   @return $result;
}

@function wrap-items-in-key($key, $list...) {
   $result: ();
   @each $item in $list {
      $result: append($result, (
         $key: quote($item)
      ));
   }
   @return $result
}

//
// Mixins
//

///
///   @webkit-scrollbar-rounding-and-margin($margin)
///
///   Helper styles for when you want elements in a Webkit-styled scrollbar to be inset 
///   from the edge of the scrollable element, yet still rounded.
///
///   Padding and margin values on scrollbar elements are unreliable; in general, they 
///   work on the scrollbar's own axis (e.g. horizontal margins on a horizontal scroll-
///   bar) but not on the cross axis. As such, we have to use nearly-invisible borders 
///   to space the scrollbar elements out from their surroundings instead. Using fully 
///   transparent borders has no effect.
///
///   Scrollbar components appear to function akin to a collection of sibling elements 
///   that are absolutely positioned. Even if you use an invisible border on the scroll-
///   bar track, for example, you'll still also need one on the thumb; the thumb doesn't 
///   seem to be a "child element" of the track.
///
@mixin webkit-scrollbar-rounding-and-margin($margin) {
   background-clip: padding-box !important;
   border: $margin solid rgba(0, 0, 0, 0.00001);
   border-radius: 5rem;
}

//
// CSS unicode-range values for common character sets seen in Google Fonts:
//
$font-charset-greek:        "U+0370-03FF";
$font-charset-greek-ext:    "U+1F00-1FFF";
$font-charset-cyrillic:     "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116";
$font-charset-cyrillic-ext: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F";
$font-charset-latin:        "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD";
$font-charset-latin-ext:    "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF";
$font-charset-vietnamese:   "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB";


///
///   @include font-faces-from-font-info($font, $only-charsets: null, $skip-charsets: null);
///
///   Accepts a font and, optionally, charsets to generate or skip. The font should be 
///   defined as a map with the following properties:
///   
///      name        Required. The name of the @font-face to create.
///      base        Required. The base filename.
///      charsets    Required. See below.
///      display     Optional. If specified, a font-display value.
///      stretch     Optional. If specified, a font-stretch value.
///      style       Optional. If specified, a font-style value.
///      weight      Optional. If specified, a font-weight value.
///   
///   The "charsets" property should have as its value another map, whose keys are the 
///   names of character sets to generate,  and whose values are unicode-range values. 
///   Font file paths will be generated in the format "./fonts/<base>-<charset>.woff2" 
///   for each of the character sets you specify.
///   
///   If $only-charsets is not null, then it can be a string or a list of strings. The 
///   function will generate @font-face declarations only for charsets in this list.
///   
///   If $skip-charsets is not null, then it can be a string or a list of strings. The 
///   function will not generate @font-face declarations for any charsets in this list.
///   
///   The $only-charsets and $skip-charsets arguments can be used together to generate 
///   @font-face rules for specific charsets ahead of other charsets, e.g. to generate 
///   Latin font declarations before non-Latin font declarations on a site that mostly 
///   uses Latin glyphs.
///
@mixin font-faces-from-font-info($font, $only-charsets: null, $skip-charsets: null, $base-href: "./", $path: "fonts/") {
   $display: swap;
   $stretch: 100%;
   $style:   "normal";
   $weight:  400;
   @if map-has-key($font, "display") {
      $display: unquote(map-get($font, "display"));
   }
   @if map-has-key($font, "stretch") {
      $stretch: map-get($font, "stretch");
      @if type-of($stretch) == "string" {
         $stretch: unquote($stretch);
      }
   }
   @if map-has-key($font, "style") {
      $style: unquote(map-get($font, "style"));
   }
   @if map-has-key($font, "weight") {
      $weight: map-get($font, "weight");
      @if type-of($weight) == "string" {
         $weight: unquote($weight);
      }
   }
   
   $charsets: map-get($font, "charsets");
   $name:     map-get($font, "name");
   $base:     map-get($font, "base");
   
   $path-stem: unquote("#{$base-href}#{$path}#{unquote($base)}");
   
   @each $key, $unicode-range in $charsets {
      $write: true;
      @if $only-charsets != null {
         @if type-of($only-charsets) == "string" and $key != $only-charsets {
            $write: false;
         }
         @if type-of($only-charsets) == "list" and not index($only-charsets, $key) {
            $write: false;
         }
      }
      @if $skip-charsets != null {
         @if type-of($skip-charsets) == "string" and $key == $skip-charsets {
            $write: false;
         }
         @if type-of($skip-charsets) == "list" and index($skip-charsets, $key) {
            $write: false;
         }
      }
      
      @if $write {
         $path: url("#{$path-stem}-#{unquote($key)}.woff2");
      
         @if type-of($weight) == "list" {
            @each $wt in $weight {
               $path: url("#{$path-stem}-#{$wt}-#{unquote($key)}.woff2");
               
               @font-face {
                  font-family: $name;
                  @if $style != normal {
                     font-style: $style;
                  }
                  font-weight: $wt;
                  @if $stretch != 100% and $stretch != normal {
                     font-stretch: $stretch;
                  }
                  @if $display != auto {
                     font-display: $display;
                  }
                  src: $path format('woff2');
                  unicode-range: unquote($unicode-range);
               }
            }
         } @else {
            @font-face {
               font-family: $name;
               @if $style != normal {
                  font-style: $style;
               }
               @if $weight != 400 {
                  font-weight: $weight;
               }
               @if $stretch != 100% and $stretch != normal {
                  font-stretch: $stretch;
               }
               @if $display != auto {
                  font-display: $display;
               }
               src: $path format('woff2');
               unicode-range: unquote($unicode-range);
            }
         }
      }
   }
}

@mixin table-top-left-cell {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:first-child>:is(th, td):first-child {
         @content;
      }
   }
}
@mixin table-top-right-cell {
   >tr,
   >:is(thead, tbody)>tr {
      &:first-child>:is(th, td):last-child {
         @content;
      }
   }
}
@mixin table-bottom-left-cell {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:last-child>:is(th, td):first-child {
         @content;
      }
   }
}
@mixin table-bottom-right-cell {
   >tr,
   >:is(thead, tbody)>tr {
      &:last-child>:is(th, td):last-child {
         @content;
      }
   }
}
@mixin table-corner-left-cells {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:first-child,
      &:last-child {
         >:is(th, td):first-child {
            @content;
         }
      }
   }
}
@mixin table-corner-right-cells {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:first-child,
      &:last-child {
         >:is(th, td):last-child {
            @content;
         }
      }
   }
}

/// Use inside of a table.
@mixin border-collapse(
   $radius: "unspecified",
   $separate-cells-from-tables: true,
   $override-cell-table-border: false
) {
   /*
      The CSS spec says that border-collapse completely nullifies border-radius. Apparently, 
      CSS 2.1 had spec'd  out a  reasonable behavior, but because browsers  didn't bother to 
      implement it, the CSSWG just spiked it outright "for interop:"
      
         https://github.com/w3c/csswg-drafts/issues/475
         
      So now, we need ugly hacks for rounded collapsing borders.
      
      As long as we're doing this, we may as well offer a few additional bells and whistles. 
      You can optionally  decide to have cell  borders collapse against  each other, but not 
      against the  table. If you also  override the color of shared cell/table  borders, and 
      add  a padding and background color on  the table, then this has the effect of  giving 
      the table an outlined border, similar to the 1990s table-outset/cell-inset look.
   */
   
   border-collapse:separate;
   border-spacing:0;
   
   @if $radius != "unspecified" {
      border-radius: $radius;
   }
   
   >:is(thead, tbody, tfoot),
   >:is(thead, tbody, tfoot)>tr {
      @if $radius != "unspecified" and $separate-cells-from-tables == false {
         /*
            Account for gaps between cell radius and table radius. NOTE: This only even 
            works on Firefox on desktop; Chrome has a more pronounced gap. This will also 
            be dependent on the table border thickness.
         */
         border-radius: calc(#{$radius} - 2px);
      } @else {
         border-radius: inherit;
      }
   }
   
   /*
      NOTE: TR elements placed directly in a TABLE will be wrapped in a TBODY element, per 
            the HTML spec:
            
            https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions
   */
   /*
      Note that we actually can't emulate border-collapse for tables with rowSpan, because 
      if some row R begins with a rowSpan > 1 cell, rows below R can no longer rely on the 
      :first-child pseudo-class to identify cells on the left edge of the table.  The rows 
      below R will have their cells inset by the rowSpan'd cell in R: the first TD/TH node 
      in these rows will actually represent the cell in the second column.
      
      Similar issues exist with the rightmost column.
      
      It's tempting to use clip-path to at least prevent row-spanning cells' corners and 
      backgrounds from poking out of the table, but doing that can cause browsers to clip 
      out the table's borders due to subpixel rounding errors at certain X-positions and 
      widths on-screen.
   */
   
   >:is(thead, tbody, tfoot) {
   
      /* collapse cell/cell borders, preferring leading cell's bottom border */
      &>tr+tr,
      &+:is(thead, tbody, tfoot)>tr {
         >:is(td, th) {
            border-top-width:0!important;
         }
      }
      
      >tr {
         >:is(td, th) {
            /* collapse cell/cell borders, preferring leading cell's right border */
            &+:is(th, td),
            &.force-is-not-leftmost {
               border-left-width:0!important;
            }
         
            @if $separate-cells-from-tables {
               /* collapse table/cell borders, preferring table */
               &:first-child:not(.force-is-not-leftmost) {
                  border-left-width:0!important;
               }
               &:last-child {
                  border-right-width:0!important;
               }
            } @else if $override-cell-table-border != false {
               &:first-child:not(.force-is-not-leftmost) {
                  border-left:$override-cell-table-border!important;
               }
               &:last-child {
                  border-right:$override-cell-table-border!important;
               }
            }
         }
         
         /* needed to cope with rowSpan */
         >:is(th, td).force-is-bottom-row {
            @if $separate-cells-from-tables {
               border-bottom-width:0!important; /* collapse table/cell borders, preferring table */
            } @else if $override-cell-table-border != false {
               border-bottom:$override-cell-table-border!important;
            }
            
            &:first-child:not(.force-is-not-leftmost) {
               border-bottom-left-radius:inherit;
            }
            &:last-child {
               border-bottom-right-radius:inherit;
            }
         }
      }
      
      &:first-child>tr:first-child {
         >:is(th, td) {
            @if $separate-cells-from-tables {
               border-top-width:0!important; /* collapse table/cell borders, preferring table */
            } @else if $override-cell-table-border != false {
               border-top:$override-cell-table-border!important;
            }
            
            &:first-child:not(.force-is-not-leftmost) {
               border-top-left-radius:inherit;
            }
            &:last-child {
               border-top-right-radius:inherit;
            }
         }
      }
      &:last-child>tr:last-child {
         >:is(th, td) {
            @if $separate-cells-from-tables {
               border-bottom-width:0!important; /* collapse table/cell borders, preferring table */
            } @else if $override-cell-table-border != false {
               border-bottom:$override-cell-table-border!important;
            }
            
            &:first-child:not(.force-is-not-leftmost) {
               border-bottom-left-radius:inherit;
            }
            &:last-child {
               border-bottom-right-radius:inherit;
            }
         }
      }
   }
}

@mixin for-firefox-only {
   @-moz-document url-prefix() {
      @content;
   }
}
@mixin exclude-firefox {
   @supports (text-size-adjust: none) or (text-decoration-skip: none) {
      @content;
   }
}

///
///   styles for smartphones. there's no good query for these, so we have 
///   to go with:
///   
///    - device has a screen
///    - device does not have a pointer that can "hover" over things
///    - maximum aspect ratio ensures we only affect portrait orientation
///    
///
@mixin for-smartphones-only {
   @media only screen and (any-hover: none) and (pointer: coarse),
          only screen and (any-hover: none) and (pointer: none) {
      @content;
   }
}
@mixin for-smartphones-only-portrait {
   @media only screen and (any-hover: none) and (pointer: coarse) and (max-aspect-ratio:3/5),
          only screen and (any-hover: none) and (pointer: none)   and (max-aspect-ratio:3/5) {
      @content;
   }
}

@mixin screen-reader {
   position:absolute;
   left:-100vw;
   top:auto;
   width:1px;
   height:1px;
}