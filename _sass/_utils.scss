
// polyfills:

@import "polyfills/map-set.scss";

// near-polyfills:

@import "./utils/_list-prepend.function.scss";

// custom:

@function apply-all-to($properties, $list) {
   $result: ();
   @each $item in $list {
      $result: append($result, map-merge($item, $properties), comma);
   }
   @return $result
}

@import "./utils/_remove-unit.function.scss";
@import "./utils/_str-replace.function.scss";

@function text-shadows-for-outline($color) {
   $text-shadows: ();
   @for $x from -1 through 1 {
      @for $y from -1 through 1 {
         @if $x != 0 or $y != 0 {
            $text-shadows: append(
               $text-shadows,
               #{$x * 2}px #{$y * 2}px 1px #{$color},
               comma
            );
         }
      }
   }
   @return $text-shadows;
}

@import "./utils/_unpack-backgrounds.function.scss";
@import "./utils/_wrap-items-in-key.function.scss";

//
// Mixins
//

///
///   @webkit-scrollbar-rounding-and-margin($margin)
///
///   Helper styles for when you want elements in a Webkit-styled scrollbar to be inset 
///   from the edge of the scrollable element, yet still rounded.
///
///   Padding and margin values on scrollbar elements are unreliable; in general, they 
///   work on the scrollbar's own axis (e.g. horizontal margins on a horizontal scroll-
///   bar) but not on the cross axis. As such, we have to use nearly-invisible borders 
///   to space the scrollbar elements out from their surroundings instead. Using fully 
///   transparent borders has no effect.
///
///   Scrollbar components appear to function akin to a collection of sibling elements 
///   that are absolutely positioned. Even if you use an invisible border on the scroll-
///   bar track, for example, you'll still also need one on the thumb; the thumb doesn't 
///   seem to be a "child element" of the track.
///
@mixin webkit-scrollbar-rounding-and-margin($margin) {
   background-clip: padding-box !important;
   border: $margin solid rgba(0, 0, 0, 0.00001);
   border-radius: 5rem;
}

//
// CSS unicode-range values for common character sets seen in Google Fonts:
//
$font-charset-greek:        "U+0370-03FF";
$font-charset-greek-ext:    "U+1F00-1FFF";
$font-charset-cyrillic:     "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116";
$font-charset-cyrillic-ext: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F";
$font-charset-latin:        "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD";
$font-charset-latin-ext:    "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF";
$font-charset-vietnamese:   "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB";


///
///   @include font-faces-from-font-info($font, $only-charsets: null, $skip-charsets: null);
///
///   Accepts a font and, optionally, charsets to generate or skip. The font should be 
///   defined as a map with the following properties:
///   
///      name        Required. The name of the @font-face to create.
///      base        Required. The base filename.
///      charsets    Required. See below.
///      display     Optional. If specified, a font-display value.
///      stretch     Optional. If specified, a font-stretch value.
///      style       Optional. If specified, a font-style value.
///      weight      Optional. If specified, a font-weight value.
///   
///   The "charsets" property should have as its value another map, whose keys are the 
///   names of character sets to generate,  and whose values are unicode-range values. 
///   Font file paths will be generated in the format "./fonts/<base>-<charset>.woff2" 
///   for each of the character sets you specify.
///   
///   If $only-charsets is not null, then it can be a string or a list of strings. The 
///   function will generate @font-face declarations only for charsets in this list.
///   
///   If $skip-charsets is not null, then it can be a string or a list of strings. The 
///   function will not generate @font-face declarations for any charsets in this list.
///   
///   The $only-charsets and $skip-charsets arguments can be used together to generate 
///   @font-face rules for specific charsets ahead of other charsets, e.g. to generate 
///   Latin font declarations before non-Latin font declarations on a site that mostly 
///   uses Latin glyphs.
///
@mixin font-faces-from-font-info($font, $only-charsets: null, $skip-charsets: null, $base-href: "./", $path: "fonts/") {
   $display: swap;
   $stretch: 100%;
   $style:   "normal";
   $weight:  400;
   @if map-has-key($font, "display") {
      $display: unquote(map-get($font, "display"));
   }
   @if map-has-key($font, "stretch") {
      $stretch: map-get($font, "stretch");
      @if type-of($stretch) == "string" {
         $stretch: unquote($stretch);
      }
   }
   @if map-has-key($font, "style") {
      $style: unquote(map-get($font, "style"));
   }
   @if map-has-key($font, "weight") {
      $weight: map-get($font, "weight");
      @if type-of($weight) == "string" {
         $weight: unquote($weight);
      }
   }
   
   $charsets: map-get($font, "charsets");
   $name:     map-get($font, "name");
   $base:     map-get($font, "base");
   
   $path-stem: unquote("#{$base-href}#{$path}#{unquote($base)}");
   
   @each $key, $unicode-range in $charsets {
      $write: true;
      @if $only-charsets != null {
         @if type-of($only-charsets) == "string" and $key != $only-charsets {
            $write: false;
         }
         @if type-of($only-charsets) == "list" and not index($only-charsets, $key) {
            $write: false;
         }
      }
      @if $skip-charsets != null {
         @if type-of($skip-charsets) == "string" and $key == $skip-charsets {
            $write: false;
         }
         @if type-of($skip-charsets) == "list" and index($skip-charsets, $key) {
            $write: false;
         }
      }
      
      @if $write {
         $path: url("#{$path-stem}-#{unquote($key)}.woff2");
      
         @if type-of($weight) == "list" {
            @each $wt in $weight {
               $path: url("#{$path-stem}-#{$wt}-#{unquote($key)}.woff2");
               
               @font-face {
                  font-family: $name;
                  @if $style != normal {
                     font-style: $style;
                  }
                  font-weight: $wt;
                  @if $stretch != 100% and $stretch != normal {
                     font-stretch: $stretch;
                  }
                  @if $display != auto {
                     font-display: $display;
                  }
                  src: $path format('woff2');
                  unicode-range: unquote($unicode-range);
               }
            }
         } @else {
            @font-face {
               font-family: $name;
               @if $style != normal {
                  font-style: $style;
               }
               @if $weight != 400 {
                  font-weight: $weight;
               }
               @if $stretch != 100% and $stretch != normal {
                  font-stretch: $stretch;
               }
               @if $display != auto {
                  font-display: $display;
               }
               src: $path format('woff2');
               unicode-range: unquote($unicode-range);
            }
         }
      }
   }
}

@mixin table-top-left-cell {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:first-child>:is(th, td):first-child {
         @content;
      }
   }
}
@mixin table-top-right-cell {
   >tr,
   >:is(thead, tbody)>tr {
      &:first-child>:is(th, td):last-child {
         @content;
      }
   }
}
@mixin table-bottom-left-cell {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:last-child>:is(th, td):first-child {
         @content;
      }
   }
}
@mixin table-bottom-right-cell {
   >tr,
   >:is(thead, tbody)>tr {
      &:last-child>:is(th, td):last-child {
         @content;
      }
   }
}
@mixin table-corner-left-cells {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:first-child,
      &:last-child {
         >:is(th, td):first-child {
            @content;
         }
      }
   }
}
@mixin table-corner-right-cells {
   &>tr,
   &>:is(thead, tbody)>tr {
      &:first-child,
      &:last-child {
         >:is(th, td):last-child {
            @content;
         }
      }
   }
}

@import "./utils/_table-border-collapse.mixin.scss";

@mixin for-firefox-only {
   @-moz-document url-prefix() {
      @content;
   }
}
@mixin exclude-firefox {
   @supports (text-size-adjust: none) or (text-decoration-skip: none) {
      @content;
   }
}

@import "./utils/_for-smartphones-only.mixin.scss";
@import "./utils/_screen-reader-only.mixin.scss";