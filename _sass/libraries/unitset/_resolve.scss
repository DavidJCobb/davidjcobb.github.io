
@import "libraries/cast/to-number.scss";
@import "libraries/str/trim.scss";
@import "polyfills/math-div.scss";

///
///   unitset-resolve
///
///      Member function for `unitset` objects, which can be used to convert 
///      a number from an arbitrary unit to intrinsic units (i.e. a unitless 
///      value).
///
///      If you specify an $extent, then that value will be what 100% maps to.
///
///      If $number has a unit which isn't defined in the unitset, or if its 
///      unit is "%" and you didn't specify an $extent, then an error will 
///      occur.
///
@function unitset-resolve($self, $number, $extent: null) {
   @if $number == null {
      @error "cannot resolve a null value";
   }
   
   $unit: null;
   
   @if type-of($number) == "string" {
      $string: str-trim($number);
      $number: cast-to-number($number);
      
      @if unitless($number) {
         $string: str-slice($string, str-length("#{$number}") + 1);
         @if str-length($string) == 0 {
            @return $number;
         }
         $unit: $string;
      } @else {
         $unit: unit($number);
      }
   } @else {
      @if unitless($number) {
         @return $number;
      }
      $unit: unit($number);
   }
   @if $unit == "%" {
      @if $extent == null {
         @error "Failed to resolve value #{$number} using a unitset: no extent provided.";
      }
      @return math-div($number, 100%) * $extent;
   }
   @if not map-has-key($self, $unit) {
      @error "Failed to resolve value #{$number} using a unitset: the unitset does not define unit #{$unit}.";
   }
   
   $unit-divisor: $number * 0 + 1;
   $unitless-num: $number / $unit-divisor;
   
   @return $unitless-num * map-get($self, $unit);
}