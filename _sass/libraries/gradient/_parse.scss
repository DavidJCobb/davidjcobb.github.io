
@import "libraries/cast/to-number.scss";
@import "libraries/gradient/fix-stops.scss";
@import "libraries/str/replace.scss";
@import "libraries/str/split.scss";
@import "libraries/str/starts-with.scss";
@import "libraries/str/ends-with.scss";
@import "libraries/str/trim.scss";
@import "polyfills/map-set.scss";

///
///   gradient-parse
///
///      Static function which parses a string and constructs a new `gradient` 
///      object. This object will have, at minimum, a `type` key and a `stops` 
///      key. Additional keys depend on the gradient type.
///
///      Keys for linear gradients:
///
///         angle
///
///            Optional. If present, represents whatever number was given for 
///            the gradient's angle. The value is cast to a number and retains 
///            whatever unit it had originally. No further processing is done, 
///            i.e. we here keep to CSS's convention of 0deg pointing up rather 
///            than right.
///
///         side-or-corner
///
///            Optional. If present, represents the side or corner for the 
///            gradient's end (i.e. "bottom left" given "to bottom left, ...").
///
///      Keys for radial gradients:
///
///         shape
///
///            Either "circle" or "ellipse".
///
///         size
///
///            Either a <radial-extent> string constant, or a list of the two 
///            values given for the gradient's size. (If only one value is 
///            given, then it is duplicated within the list.) In the latter 
///            case, the values remain stringified; use `cast-to-number` or 
///            `unitset-resolve` to deal with them further.
///
///         center
///
///            Optional. If the gradient specified a centerpoint, then this 
///            will be a list of two values. The values may be keywords e.g. 
///            "top" and "left", or they may be stringified numbers; in the 
///            latter case, use `cast-to-number` or `unitset-resolve` to 
///            deal with them further.
///
///      To work with a gradient further, e.g. sampling the color shown at a 
///      given position or offset along the gradient line, you will need to 
///      construct a `gradientbox` object that wraps the gradient, and then 
///      query that object; see `gradientbox-new`.
///
@function gradient-parse($src) {
   $RADIAL-EXTENTS: (
      "closest-corner",
      "closest-side",
      "farthest-corner",
      "farthest-side"
   );

   $result: ();
   
   $src: str-trim-start($src);
   
   $i:    null;
   $type: null;
   @if str-starts-with($src, "linear-gradient(") {
      $type: linear;
      $i:    str-length("linear-gradient(");
   } @else if str-starts-with($src, "radial-gradient(") {
      $type: radial;
      $i:    str-length("radial-gradient(");
   } @else {
      @error "failed to parse gradient value: #{inspect($src)}";
   }
   $result: map-set($result, "type", $type);
   $src:    str-trim-start(str-slice($src, $i + 1));
   
   @if $type == linear {
      @if str-starts-with($src, "to ") {
         $src:    str-slice($src, str-length("to ") + 1);
         $i:      str-index($src, ",");
         $result: map-set($result, "side-or-corner", str-trim-start(str-slice($src, 1, $i - 1)));
      } @else {
         $i:      str-index($src, ",");
         $angle:  cast-to-number(str-slice($src, 1, $i - 1));
         $result: map-set($result, "angle", $angle);
      }
      $src: str-trim-start(str-slice($src, $i + 1));
   } @else if $type == radial {
      $i: str-index($src, ",");
      
      $shape-size-pos: str-split(str-trim-start(str-slice($src, 1, $i - 1)), " ");
      $src: str-slice($src, $i + 1);
      
      $shape:  null;
      $size:   ();
      $center: ();
      
      $at-count:   null;
      $after-at:   false;
      $after-size: false;
      //
      @for $i from 1 through length($shape-size-pos) {
         $item: nth($shape-size-pos, $i);
         
         @if $item == "circle" or $item == "ellipse" {
            $shape: $item;
            @if length($size) > 0 {
               $after-size: true;
            }
            @if $at-count != null {
               $after-at: true;
               $at-count: null;
            }
         } @else if $item == "at" {
            @if not $after-at {
               $at-count: 2;
               @if length($size) > 0 {
                  $after-size: true;
               }
            }
         } @else {
            @if $at-count != null {
               $center:   append($center, $item);
               $at-count: $at-count - 1;
               @if $at-count <= 0 {
                  $at-count: null;
                  $after-at: true;
               }
            } @else if not $after-size {
               $size: append($size, $item);
               @if length($size) == 2 or index($RADIAL-EXTENTS, $item) != null {
                  $after-size: true;
               }
            }
         }
      }
      
      $len: length($size);
      @if $len > 0 {
         @if $len == 1 {
            @if $shape == null {
               $shape: "circle";
            }
            $item: nth($size, 1);
            @if index($RADIAL-EXTENTS, $item) != null {
               $result: map-set($result, "size", $item);
            } @else {
               $result: map-set($result, "size", ($item, $item));
            }
         } @else {
            @if $shape == null {
               $shape: "ellipse";
            }
            $result: map-set($result, "size", $size);
         }
      } @else {
         $result: map-set($result, "size", "farthest-corner");
         $shape:  "circle";
      }
      $result: map-set($result, "shape", $shape);
      
      $len: length($center);
      @if $len > 0 {
         @if $len == 1 {
            $item: nth($center, 1);
            @if index((top, bottom, left, right), $item) {
               $result: map-set($result, "center", ($item, "center"));
            } @else {
               $result: map-set($result, "center", ($item, $item));
            }
         } @else {
            $result: map-set($result, "center", $center);
         }
      }
   }
   
   //
   // Done with type-specific parsing. Now, grab and fix up gradient color stops.
   //
   
   $raw-stops: str-split($src, ",");
   $last-raw:  str-trim-end(nth($raw-stops, length($raw-stops)));
   @if str-ends-with($last-raw, unquote(")")) {
      $last-raw:  str-slice($last-raw, 1, str-length($last-raw) - 1);
      $raw-stops: set-nth($raw-stops, length($raw-stops), $last-raw);
   }
   
   $i:     1;
   $stops: ();
   @while $i <= length($raw-stops) {
      $stop: str-trim(nth($raw-stops, $i));
      $stop: str-split($stop, " ", 3);
      @if length($stop) == 1 {
         $stop:  (nth($stop, 1), null);
      } @else if length($stop) == 3 {
         $hint:  (nth($stop, 1) , nth($stop , 2));
         $stop:  (nth($stop, 1) , nth($stop , 3));
         $stops: append($stops, $stop);
         $stop:  $hint;
      }
      $stops: append($stops, $stop);
      
      $i: $i + 1;
   }
   $result: map-set($result, "stops", $stops);
   $result: gradient-fix-stops($result);
   
   @return $result;
}