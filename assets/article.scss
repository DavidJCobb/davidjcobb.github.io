---
---

@import "utils";
@import "theme-mixins";

main p {
   text-align:justify;
   
   /* override line height */
   line-height:1.5em;
}

/*

   below: article content styles

*/

$mark-colors-normal: #FC0, #8FA, #BCF, #F9C, #ED9, #D8E0F0; /* orange, green, blue, pink, beige, silver */

@if length($mark-colors-normal) < 6 {
   @error "At least six highlight colors are needed.";
}

mark {
   background: nth($mark-colors-normal, 1);
   @extend %cannot-handle-auto-dark-mode;
   
   @for $i from 1 through length($mark-colors-normal) {
      &.mark-#{$i} {
         background: nth($mark-colors-normal, $i);
      }
   }
}

dl {}
dt {
   font-weight: bold;
}
dd + dt {
   margin-top: 1em;
}
dd {
   line-height: 1.5em;
   text-align: justify;
}

.cite-ref,
.footnote {
   font-size: .8em;
   line-height: 1em;
   vertical-align: super;
}
.source-list {
   >li {
      >a {
         font-weight: bold;
      }
      .archives {
         font-size: .85em;
         
         ul {
            display: inline-block;
            list-style: none;
            padding: 0;
            margin:  0;
         }
         li {
            display: inline-block;
            padding: 0;
            margin:  0;
         }
      }
   }
}
:is(.source-list, .footnotes) {
   padding-left: 2.5em;
   
   >li {
      $vertical-spacing: 1em;
      
      padding: $vertical-spacing 1em $vertical-spacing 1em;
      margin:  0;
      
      &::marker {
         content: "[" counter(list-item) "] ";
         font-weight: bold;
      }
      &:target {
         animation: jump-to-footnote 3s ease-in 1;
      }
      
      /* If we nullify the padding, then the animated yellow background seen 
         when linking directly to this list item will be too short. Instead, 
         pull everything else closer: eat into the margins of the heading 
         above this list, and into the padding of the containing card below 
         this list. */
      &:first-child {
         margin-top: -$vertical-spacing;
      }
      &:last-child {
         margin-bottom: -$vertical-spacing;
      }
      &:not(:first-child) {
         border-top:1px solid #CCC;
      }
   }
}

/* yellow fade when jumping to a footnote or source */
@keyframes jump-to-footnote {
   0% {
      background:rgba(255, 255, 128, 0.5);
      box-shadow:0 0 6px 6px rgba(255, 255, 128, 0.5);
   }
   100% { background:transparent }
}

lu-math {
   &:not([data-inline]) {
      /*
         For certain especially complex elements, Chrome on mobile may scale adjacent 
         pieces of text  by wildly  inconsistent amounts,  resulting in "ransom note" 
         font sizing. The following influences, among others, are documented:
         
          - Explicit heights disable autosizing.
          
          - `white-space: nowrap` disables autosizing.
          
          - "Clusters" of text fewer than four lines are not autosized.
         
         Meanwhile, I have observed that  `display: inline-block`  affects autosizing 
         in ways that are not straightforward.
         
         Chrome documents their text autosizing at:
         
            <http://tinyurl.com/TextAutosizer>
            <https://docs.google.com/document/d/1PPcEwAhXJJ1TQShor29KWB17KJJq7UJOM34oHwYP3Zg/edit>
         
         Autosize  algorithms  rely on logic that we  can neither  directly check nor 
         directly control  from CSS. The  `text-size-adjust` property can  be used to 
         disable autosizing directly, or to "influence" it; however, the mechanism of 
         influence is  comically inadequate. We can directly override  the multiplier 
         applied to an element's font size,  but only with a fixed constant, which is 
         completely inadequate: the whole *point* of autosizing is to  scale the font 
         size based on  metrics that we can't measure from CSS;  we *can't know* what 
         an appropriate override value would ever be.
         
         When an autosizing algorithm  malfunctions in spectacular fashion, then, the 
         only recourse we have is to disable autosizing entirely; and if the unscaled 
         font size ends up being too small for some users, they're just screwed.
      */
      text-size-adjust: none;
      
      .explanation>aside {
         text-size-adjust: auto;
      }
   }
   
   $padding: .05em;
   $stripe-width: 6px;
   
   :is(del, .del,):not(.invis),
   .explanation[open] ~ * :is(ins, .ins):not(.invis) {
      border: 1px solid rgba(0, 0, 0, 0.1);
      border-radius: .25em;
      
      padding:        $padding;
      padding-bottom: $padding + .10em;
      
      mark {
         background: transparent none;
         border:0;
      }
   }
   
   del {
      text-decoration: none;
   }
   :is(del, .del):not(.invis) {
      background:
         repeating-linear-gradient(45deg, #FF000040 0 #{$stripe-width}, transparent #{$stripe-width} #{$stripe-width * 2}),
         #FF000030;
   }
   
   ins {
      text-decoration: none;
   }
   .explanation[open] ~ * :is(ins, .ins):not(.invis) {
      background:
         repeating-linear-gradient(45deg, #00FF0040 0 #{$stripe-width}, transparent #{$stripe-width} #{$stripe-width * 2}),
         #00FF0030;
   }
}

lu-math {
   $badge-explanation-button: true;
   
   $explanation-border-radius: .2rem;

   .toggle-explanation {
      font-family: $theme-body-font-family;
   }
   @if $badge-explanation-button {
   
      $badge-explanation-match-corners: true;
   
      $padding: .125rem;
      $margin:  .250rem;
      
      @if $badge-explanation-match-corners {
         $margin: 0;
      }
   
      .toggle-explanation {
         /*grid-row: expl-margin-top / expl-margin-bottom;*/
         position: relative;
         
         font-size: 0;
         width:     1.2rem + $padding * 2;
         height:    1.2rem + $padding * 2;
         border-radius: 50%; /* :hover and click interactions are based on SUMMARY's hitbox, not ::after's hitbox */
         
         align-self:   center;
         justify-self: start;
         
         margin-left: $margin;
         
         &::after {
            content: "?";
            
            display: inline-block;
            width:   1.2rem;
            height:  1.2rem;
            padding: $padding;
            
            border-radius: 50%;
            cursor: pointer;
            
            font-size:   1.2rem;
            line-height: 1.2rem;
            text-align:  center;
            background:  #E8E8E8;
         }
         &:hover::after {
            background:#FF7400;
         }
      }
      @if $badge-explanation-match-corners {
         .explanation[open]>.toggle-explanation {
            &::after {
               border-radius: 50% 50% $explanation-border-radius $explanation-border-radius;
            }
         }
      }
   } @else {
      .toggle-explanation {
         border-radius:$explanation-border-radius;
         font-family: $theme-body-font-family;
         cursor: pointer;
         
         width:min-content;
         white-space:nowrap;
         padding:.5em 1em;
         background:#E8E8E8;
      }
   }
   .explanation>aside {
      border-radius:$explanation-border-radius;
      font-family: $theme-body-font-family;
      padding:.5em 1.5em;
      background:#E8E8E8;
      
      p {
         text-align: left;
         text-align: inline-start;
      }
      
      >lu-math:not([data-inline]):only-child {
         margin-top:0!important;
         margin-bottom:0!important;
      }
   }
}
:is(
   lu-math.announce-marks,
   lu-math .announce-marks
) {
   mark {
      &::before,
      &::after {
         @include screen-reader;
      }
      &::after {
         content: "[mark end]";
      }

      &,
      &.mark-1 {
         &::before { content: "[mark orange start]" }
      }
      &.mark-2 {
         &::before { content: "[mark green start]" }
      }
      &.mark-3 {
         &::before { content: "[mark blue start]" }
      }
      &.mark-4 {
         &::before { content: "[mark pink start]" }
      }
      &.mark-5 {
         &::before { content: "[mark beige start]" }
      }
      &.mark-6 {
         &::before { content: "[mark silver start]" }
      }
   }
}

section>aside {
   border-radius:1rem;
   border:4px solid #FF7400;
   padding:1.5rem 2rem;
   /*margin:1rem -1rem;*/
   margin:1.5rem 0;
   
   box-shadow:
      0  0px  4px rgba(70, 30, 0, 0.05),
      0  5px  6px rgba(70, 30, 0, 0.05),
      0  6px  8px rgba(70, 30, 0, 0.06),
      0  8px 10px rgba(70, 30, 0, 0.06),
      0 10px 12px rgba(70, 30, 0, 0.07),
      inset 0  0px  4px rgba(70, 30, 0, 0.05),
      inset 0  5px  6px rgba(70, 30, 0, 0.05),
      inset 0  6px  8px rgba(70, 30, 0, 0.06);
   @include for-smartphones-only {
      /*
         Having too many box-shadows on-screen at one time can cause lag for weaker devices, 
         such as smartphones. For that reason, we're going to have the inset box shadows on 
         these elements fall back to using a border-image. (Designing an SVG to achieve the 
         same effect for outset box-shadows is much harder.)
         
         A border-image will replace a normal border, so we have to include the orange line 
         in the SVG as well.
      */
      border-image: url("./article-aside-inset-shadow.svg") 18 20 16 / 1.125rem 1.25rem 1rem / 0;
      border-width: 4px;
      min-height:calc(3.625em - 2px);
      box-shadow:
         0  0px  4px rgba(70, 30, 0, 0.05),
         0  5px  6px rgba(70, 30, 0, 0.05),
         0  6px  8px rgba(70, 30, 0, 0.06),
         0  8px 10px rgba(70, 30, 0, 0.06),
         0 10px 12px rgba(70, 30, 0, 0.07);
   }
}

.card-cutout {
   @include content-card-cutout;
}
figure.card-cutout>.wrap {
   @extend %content-card;
   width:min-content;
   margin:0 auto;
}

figure.multi-figure {
   display:flex;
   flex-flow:row nowrap;
   justify-content:center;
   gap:4rem;
   
   >.wrap {
      margin:0;
      
      &.bulky-image {
         padding:1rem;
      }
   }
}

figure.multi-figure.mathematical-graph {
   gap: 1rem;
   flex-flow: row wrap;
   
   >.wrap {
      padding:1rem;
      
      >.graph {
         display: block;
      }
   }
}

figure.mathematical-graph:not(.multi-figure) {
   margin:1em 0;
   text-align:center;
   
   &.card-cutout {
      padding:2em 1em;
   }
   
   >.graph {
      display:inline-block;
      margin:0 1em;
      
      &:first-child:last-child {
         display: block;
         margin:0 auto;
      }
   }
   &.card-cutout>.graph {
      @extend %content-card;
      
      padding:1rem;
      border-radius:1rem;
   }
}