---
---

$lu-math-line-height: 1.2 !default;

$lu-math-font-face: "Times New Roman";
/*
   For your chosen font, extract these properties from the font headers and OpenType OS2 
   info. This site works: https://fontdrop.info/
*/
$lu-math-font-face-units-per-em:       2048; /* unitsPerEm */
$lu-math-font-face-os2-typo-ascender:  1420; /* sTypoAscender */
$lu-math-font-face-os2-typo-descender: -442; /* sTypoDescender */

$lu-math-font-top-to-bottom-height:
   ($lu-math-font-face-os2-typo-ascender - $lu-math-font-face-os2-typo-descender)
   /
   $lu-math-font-face-units-per-em;

$lu-math-font-top-to-bottom-height-em: $lu-math-font-top-to-bottom-height * 1em;
$lu-math-font-leading:    ($lu-math-line-height * 1em) - $lu-math-font-top-to-bottom-height-em;
$lu-math-line-box-height: ($lu-math-line-height * 1em) + $lu-math-font-leading;

/* when paired with invisible-readable, makes text non-selectable 
   and effectively only accessible to screen readers */
@mixin unselectable-not-in-flow {
   position:absolute;
   user-select:none!important;
}

@mixin invisible-readable {
   display:inline-block;
   width:1px;
   height:1px;
   overflow:hidden;
   margin:-1px 0 0 -1px;
   
   /* let's move it out of the document flow, too */
   /* this approach breaks: copying the text forces line breaks
   position:absolute;
   */
   text-indent:-999999px;
   flex:0 0 1px;
   
   &:first-child {
      margin:0 0 -1px -1px; /* needed for the negative margin hack to work on the first child in a column flexbox */
   }
}

@mixin invisible-selectable-readable {
   @include invisible-readable;
   
   &:first-child {
      margin:0 0 -1px -1px; /* needed for the negative margin hack to work on the first child in a column flexbox */
   }
}

@mixin screen-reader-only {
   @include invisible-readable;
   @include unselectable-not-in-flow;
}

@function make-big-glyph-background($symbol) {
   $mime:    "data:image/svg+xml";
   $charset: "utf8";
   
   $svg-open: "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 100' width='30' height='100' preserveAspectRatio='none'>";
   
   $node: "<text dominant-baseline='ideographic' x='0' y='100' textLength='30' fill='black' font-size='100'>#{$symbol}</text>";

   @return url("#{$mime};charset=#{$charset},#{$svg-open}#{$node}</svg>");
}

lu-math{
   display:block;
   position:relative;
   
   text-align:center;
   
   font-family:Times New Roman,serif;
   line-height:$lu-math-line-height * 100%;
   hyphens: none;
   
   &[data-inline] {
      display:inline;
      margin:initial;
   }
   &:not([data-inline]) {
      margin:1em 0;
      margin-block-start:1em!important;
      margin-block-end:1em!important;
   }
}

lu-math {
   mark {
      display:inline-block;
   }
   span {
      display:inline-block;
      vertical-align:middle;
   }
}

lu-math m-equation-number {
   grid-area: none;
   position:absolute;
   top:50%;
   right:0;
   transform:translate(0, -50%);
   
   >m-value {
      line-height:1em; /* shouldn't have any descenders */
      vertical-align:top;
      
      &::before { content: "("; }
      &::after { content: ")"; }
   }
}
lu-math m-exp {

   /* this element allows you to display exponents, with appropriate copy-and-paste 
      and screen reader behavior. here is a usage example; brace yourself:
      
         <m-exp><span aria-hidden="true"><m-raw>^</m-raw>2</span><m-raw data-screen-reader-only>&nbsp;squared</m-raw></m-exp>
      
      there are three ways this element can be viewed.
      
       - when seen by a sighted user, it is "x" adorned with a superscript "2".
       - when copied into plaintext, it is "x^2".
       - when read by a screen reader, it is "x squared".
      
      correct setup for most cases is as follows:
      
       - the element's first child should be a SPAN with aria-hidden="true", to 
         define content for sighted users and plaintext. this element's contents 
         will vary depending on whether the exponent is...
         
          - ...a monomial (single term).
          
             - the first child should be an m-raw with "^" as text content.
             
             - after this, just write the bare exponent.
          
          - ...an expression.
          
             - the first child should be an m-raw with "^(" as text content.
             
             - the last child should be an m-raw with ")" as text content.
         
       - the element's second child should be an m-raw containing an attribute 
         named data-screen-reader-only; this element should contain a non-breaking 
         space, followed by the content intended for screen readers, followed by an 
         additional non-breaking space:
         
          - if the exponent is 2, use "squared"
          - if the exponent is 3, use "cubed"
          - if the exponent is any single number besides those, use "to the N-th 
            power" substituting the number in for "N".
      
      if the exponent is anything more complex than a single number, then alter the 
      above instructions as follows:
      
       - move the screen-reader-only content to the start of the m-exp element.
       - use "&nbsp;to the power of&nbsp;" as the screen-reader-only content.
       - move the exponent content (i.e. everything but the caret) outside of, and 
         after, the aria-hidden element.
      
      example, with whitespace added (strip it when doing this yourself):
      
         <m-exp>
            <m-raw data-screen-reader-only>
               &nbsp;
               to the power of
               &nbsp;
            </m-raw>
            <span aria-hidden="true"><m-raw>^</m-raw></span>
            <m-raw>(</m-raw>
            2<var>x</var> + <var>y</var>
            <m-raw>)</m-raw>
         </m-exp>
      
      some developer notes:

       - we need the non-breaking spaces so that screen readers don't collapse the 
         word "squared" into the variable. using the example at the top of this 
         comment, if we replace the non-breaking space with a normal one, then NVDA 
         reads the value as "xsquared" (which sounds like "ssssquared," like, with a 
         hiss). NVDA can see caret symbols but won't read them (i tested with it 
         outside of the aria-hidden content, obviously). */

   font-size: smaller;
   vertical-align: super;
}
lu-math m-fraction {

   /*
   
      Basic usage instructions:
      
       - m-raw   child with "(" text content
       - m-numer child with numerator content
       - m-raw   child with " &divide; " text content
       - m-denom child with denominator content
       - m-raw   child with ")" text content
       
      If numerator is multiple terms:
      
       - prepend "(" to first   m-raw
       - prepend ")" to midddle m-raw
       
      If denominator is multiple terms:
      
       - append "(" to middle m-raw 
       - append ")" to last   m-raw
      
      Outer raw delimiters are only  needed if the fraction as 
      a whole is multiplied by something without the use of an 
      intervening multiplication sign.
   
   */

   display:inline-grid;
   vertical-align:middle;
   grid-template:
      "lc l numer r rc" max-content
      "lc l denom r rc" max-content / fit-content(100%);
   
   flex-flow:column nowrap;
   
   >:is(m-numer, m-denom) {
      text-align:center;
      padding:0 .5ch;
   }
   
   >m-numer {
      grid-area: numer;
   }
   >m-denom {
      grid-area: denom;
      border-top:1px solid #000; /* dividing line: */
   }
   
   >m-rawcap {
      grid-area: lc;
   }
   >m-raw {
      grid-area: l;
   }
   >m-denom~m-raw {
      grid-area: r;
   }
   >m-denom~m-rawcap {
      grid-area: rc;
   }
}
lu-math m-function-def {
   >m-name {
      font-weight:bold;
   }
   >m-args {
      >m-delim,
      >m-sep {
         font-weight:bold;
      }
   }
}
lu-math m-givens {
   display:grid;
   grid-template-columns:1fr fit-content(100%) 1fr;
   gap:.5em;
   
   @at-root :where(#{&})>* {
      grid-column:2;
   }
   text-align:left;
   margin-bottom:1em;
   break-after:avoid;
   
   >label {
      display:block;
   }
   
   >dl {
      display:grid;
      grid-template-columns:max-content max-content 1fr;
      
      margin:0;
      
      >dt,
      >m-sep,
      >dd {
         align-self: baseline;
      }
      
      >dt {
         grid-column:1;
         white-space:nowrap;
         text-align:right;
      }
      >m-sep {
         grid-column:2;
         white-space:pre;
         user-select:none;
      }
      >dd {
         grid-column:3;
         padding:0;
         margin:0;
      }
   }
}

lu-math m-layout-left {
   /*
      Needs to be full-width so that equation numbers can be placed directly 
      inside; needs position:relative for the same reason. That means that to 
      center the content box, we need CSS grids.
   */
   display:grid;
   grid-template-columns:1fr fit-content(100%) 1fr;
   
   position:relative;
   max-width:100%;
   text-align:left;
   
   &::before {
      content:"";
      grid-column:1;
   }
   &::after {
      content:"";
      grid-column:3;
   }
   
   /*
      Use the :where selector for minimum specificity, so that other elements 
      can opt out of grid layouts with minimal effort.
   */
   @at-root :where(#{&})>* {
      grid-column:2;
   }
}
lu-math m-layout-snake {
   $v-offset: ($lu-math-line-height - 1em) * 0.5 * 3;
   
   display: grid;
   align-items: baseline;
   justify-content:center;
   grid-template:
      "lead nulT nulR" auto
      "nulL body nulR" auto
      "nulL nulB tail" auto /
      fit-content(100%) fit-content(100%) fit-content(100%);
      
   >m-head+m-body {
      margin-top:-$lu-math-line-box-height;
   }
   >m-head:has(sup, sub)+m-body {
      /*
         Line boxes vary in height depending on whether they contain superscripts 
         and/or subscripts.
      */
      margin-top:-($lu-math-line-box-height + $lu-math-font-leading);
   }
   >m-body:not(:last-child) {
      margin-bottom:-$lu-math-line-box-height;
   }
   
   >m-head {
      grid-area:  lead;
      text-align: right;
      padding-right:.5em;
   }
   >m-body {
      grid-area: body;
   }
   >m-tail {
      grid-area:  tail;
      text-align: left;
      padding-left:.5em;
      align-self:end;
   }
}
lu-math m-layout-v-segments {
   display:grid;
   grid-template-columns:auto 1fr;
   align-items:baseline;
   
   >m-sep {
      grid-column:1;
      padding:0 .5em 0 0;
      text-align:right;
      
      &:has(>mark:only-child) {
         padding:0;
         >mark {
            padding-right:.5em;
         }
      }
   }
   >m-segment {
      grid-column:2;
   }
}

lu-math m-raw {
   /* hide content from sighted users, while leaving it audible for screen readers 
      and copyable into plain text. can optionally disable copying. */
   @include invisible-selectable-readable;
   
   &[data-screen-reader-only] {
      @include unselectable-not-in-flow;
   }
}
lu-math m-rawcap {
   /* if lu-math-raw denotes content at the start of a line, then you must place a 
      lu-math-raw-endcap before the content, to ensure correct copy-and-paste behavior 
      if the user drag-selects horizontally. for raw content at the end of a line, 
      place the endcap after it.
      
      this element must contain at least one whitespace. */
   white-space:pre;
   
   /* ordinarily, i'd set the font-size to something small. however, Firefox's text 
      selection behavior is... unhinged. if the font size is smaller than the rest 
      of the line, then the math-raw text that this element is supposed to cap off 
      will only be caught in a drag-selection and copied if the user's cursor was 
      dragged at or below the height of the font.
      
      like, dragging leftward and upward would cause the endcap to fail, whereas 
      dragging leftward and downward would allow the endcap to work.
      
      keeping the font full-size and limiting the element to a 1px width seems to 
      avoid this and work consistently. */
   display:inline-block;
   width:1px;
   overflow:hidden;
   
   /* conceal selection */
   opacity:0.03;
}
lu-math m-row {
   display:block;
   position:relative;
   margin:0.5em 0;
   orphans: 0; /* do not split equations across pages */
   
   &+m-row {
      margin-top: 1.5em;
   }
}
lu-math m-solvestep {
   /*
      Step in solving a problem. Adjacent steps are separated by dotted lines. Steps 
      can be annotated with a DETAILS element containing a prose explanation of the 
      changes made.
      
      Content of a step MUST be wrapped in a layout tag or in M-CONTENT.
      
      Details tag, if present, MUST have class "explanation", must wrap its prose in 
      an ASIDE tag, and must be placed before the content of the step.
   */
   display:grid;
   grid-template:
      [expl-margin-top]    "_l          content     _r         " 1fr
      [expl-margin-middle] "open-expl   content     _r         " min-content [expl-margin-bottom] 
                           "explanation explanation explanation" auto / 1fr fit-content(100%) 1fr;
   
   &>:is(
      m-content,
      m-layout-left,
      m-layout-snake,
      m-layout-v-segments
   ) {
      grid-area: content;
   }
   &>details.explanation>aside {
      grid-area: explanation;
      margin-top: 1em;
      text-align:left;
   }

   position:relative;
   margin:0.5em 0;
   orphans: 0; /* do not split equations across pages */
   
   &+m-solvestep {
      padding-top:0.5em;
      border-top:1px dotted #000;
   }
   
   >details.explanation {
      display:contents;
      
      >summary {
         user-select: none;
         grid-column: 1;
      }
      @at-root :where(#{&})>summary { /* use :where for easier overriding */
         grid-row: expl-margin-middle / expl-margin-bottom;
      }
      
      &:not([open]) {
      }
      &[open] {
         
         &~* del {
            display:initial;
         }
         
      }
   }
}
lu-math m-therefore {
   &[data-block] {
      display: block;
      text-align:center;
      margin:.5em 0;
      font-size:3em;
      
      >span {
         vertical-align: ($lu-math-line-height - $lu-math-font-top-to-bottom-height) * 100%;
      }
   }
}

/*
   Vertically stretchy delimiters. Proper usage is as follows:
   
    - Delimiter container element
       - m-delim   element with opening delimiter as text content
       - m-content element containing group content
       - m-delim   element with closing delimiter as text content
   
   Note that these containers have no way to cope with the word-rapping of 
   their contents. Their content can wrap, but the delimiters won't be 
   limited to just one "logical line;" they'll stretch to the full height 
   of the entire container.
*/
lu-math :is(m-big-parens, m-veclength) {
   /*
   >m-delim {
      display: inline-block;
      height:  100%;
      vertical-align: top;
      
      --glyph-width:1ch;
      
      position:relative;
      width:1px;
      margin-right:var(--glyph-width);
      
      text-indent: -1000vw;
      
      &::after {
         content: "";
         display: block;
         
         position: absolute;
         left: 0;
         top:  0;
      
         width:  var(--glyph-width);
         height: 100%;
      }
   }*/
   /*
      above code doesn't allow things like MARK or DEL to properly contain 
      the full height of this element, unless those things are made into 
      inline-blocks (which then breaks delim heights from the above code).
   */
   
   display:inline-grid;
   grid-template: "l body r" / min-content fit-content(100%) min-content;
   vertical-align:middle;
   
   >m-delim {
      grid-area: l;
   }
   >m-content {
      grid-area: body;
   }
   >m-content~m-delim {
      grid-area: r;
   }
   >m-delim {
      --glyph-width:1ch;
      
      position:relative;
      width:1px;
      margin-right:var(--glyph-width);
      
      text-indent: -1000vw;
      
      &::after {
         content: "";
         display: block;
         
         position: absolute;
         left: 0;
         top:  0;
      
         width:  var(--glyph-width);
         height: 100%;
      }
   }
}
lu-math {
   m-big-parens {
      >m-delim::after {
         background: no-repeat left top/var(--glyph-width) 100% make-big-glyph-background("(");
      }
      >*+m-delim::after {
         background: no-repeat left top/var(--glyph-width) 100% make-big-glyph-background(")");
      }
   }
   m-veclength>m-delim::after {
      background: no-repeat left top/var(--glyph-width) 100% make-big-glyph-background("||");
   }
}

lu-math del {
   display:none; /* TODO... */
}
lu-math ins {
   all:unset; /* TODO... */
}

lu-math var {
   white-space:nowrap;
   
   &>sub {
      &::before,
      &::after {
         white-space:pre;
         
         @include invisible-readable;
      }
      &::before { content: " sub "; }
      &::after { content: " base " }
      
      /*
         edge-case: italicized subscript elements may overlap the next visible 
         line box by 1px; if that box has a background color (e.g. a highlighted 
         portion of an equation), it will clip the subscript.
      */
      &:last-child {
         position:relative;
         z-index:1;
      }
   }
}

/* this element allows you to display exponents, with appropriate copy-and-paste 
   and screen reader behavior. here is a usage example; brace yourself:
   
      <lu-math-exp><span aria-hidden="true"><lu-math-raw>^</lu-math-raw>2</span><lu-math-raw data-screen-reader-only>&nbsp;squared</lu-math-raw></lu-math-exp>
   
   there are three ways this element can be viewed.
   
    - when seen by a sighted user, it is "x" adorned with a superscript "2".
    - when copied into plaintext, it is "x^2".
    - when read by a screen reader, it is "x squared".
   
   correct setup for most cases is as follows:
   
    - the element's first child should be a SPAN with aria-hidden="true", to 
      define content for sighted users and plaintext. this element's contents 
      will vary depending on whether the exponent is...
      
       - ...a monomial (single term).
       
          - the first child should be a lu-math-raw with "^" as text content.
          
          - after this, just write the bare exponent.
       
       - ...an expression.
       
          - the first child should be a lu-math-raw with "^(" as text content.
          
          - the last child should be a lu-math-raw with ")" as text content.
      
    - the element's second child should be a lu-math-raw containing an attribute 
      named data-screen-reader-only; this element should contain a non-breaking 
      space, followed by the content intended for screen readers, followed by an 
      additional non-breaking space:
      
       - if the exponent is 2, use "squared"
       - if the exponent is 3, use "cubed"
       - if the exponent is any single number besides those, use "to the N-th 
         power" substituting the number in for "N".
   
   if the exponent is anything more complex than a single number, then alter the 
   above instructions as follows:
   
    - move the screen-reader-only content to the start of the lu-math-exp element.
    - use "&nbsp;to the power of&nbsp;" as the screen-reader-only content.
    - move the exponent content (i.e. everything but the caret) outside of, and 
      after, the aria-hidden element.
   
   example, with whitespace added (strip it when doing this yourself):
   
      <lu-math-exp>
         <lu-math-raw data-screen-reader-only>
            &nbsp;
            to the power of
            &nbsp;
         </lu-math-raw>
         <span aria-hidden="true"><lu-math-raw>^</lu-math-raw></span>
         <lu-math-raw>(</lu-math-raw>
         2<var>x</var> + <var>y</var>
         <lu-math-raw>)</lu-math-raw>
      </lu-math-exp>
   
   some developer notes:

    - we need the non-breaking spaces so that screen readers don't collapse the 
      word "squared" into the variable. using the example at the top of this 
      comment, if we replace the non-breaking space with a normal one, then NVDA 
      reads the value as "xsquared" (which sounds like "ssssquared," like, with a 
      hiss). NVDA can see caret symbols but won't read them (i tested with it 
      outside of the aria-hidden content, obviously). */
lu-math-exp {
   font-size:smaller;
   vertical-align:super;
}

/* this element allows you to wrap expressions in a square-root "radical" symbol 
   with an appropriate overline. correct usage is as follows:
   
    - first children are...
       - a lu-math-raw-endcap with one whitespace as text cotnent
       - a lu-math-raw with "&radic;(" as text content
    - last children are...
        - a lu-math-raw with ")" as text content
        - a lu-math-raw-endcap
    
    - HTML comments are used to ensure that there is NO WHITESPACE between the 
      raw and raw-endcap elements, and between the raw elements and the actual 
      meaningful content

   */
lu-math-sqrt {
   --radical-width:.5em;
   
   background:
      /* radical (bendy prefix line): */
      no-repeat left center/var(--radical-width) 100% url("data:image/svg+xml;charset=utf8,\
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 100' width='50' height='100' preserveAspectRatio='none'>\
   <line x1=' 0' y1=' 50' x2='25' y2='100' stroke='black' vector-effect='non-scaling-stroke' />\
   <line x1='25' y1='100' x2='50' y2='0' stroke='black' vector-effect='non-scaling-stroke' />\
</svg>"),
      /* overline: */
      no-repeat left top/100% 1px linear-gradient(to right, transparent var(--radical-width), black var(--radical-width), black);

   padding-top:.25em;
   padding-left:calc(var(--radical-width) + .5ch);
   padding-right:.5ch;
}

lu-math-big-parens,
lu-math-binomial-coefficient,
lu-math *.big-parens {
   --glyph-width:1ch;
   
   display:inline-block;
   
   background:
      no-repeat left top/var(--glyph-width) 100% url("data:image/svg+xml;charset=utf8,\
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 100' width='30' height='100' preserveAspectRatio='none'>\
   <text dominant-baseline='ideographic' x='0' y='100' textLength='30' fill='black' font-size='100'>(</text>\
</svg>"),
      no-repeat right top/var(--glyph-width) 100% url("data:image/svg+xml;charset=utf8,\
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 100' width='30' height='100' preserveAspectRatio='none'>\
   <text dominant-baseline='ideographic' x='0' y='100' textLength='30' fill='black' font-size='100'>)</text>\
</svg>");

   padding-left:calc(var(--glyph-width) + .5ch);
   padding-right:calc(var(--glyph-width) + .5ch);
}
lu-math-fraction.big-parens {
   display:inline-flex;
   padding-left:calc(var(--glyph-width) + .2ch);
   padding-right:calc(var(--glyph-width) + .2ch);
   margin:0 .3ch;
}

mark>lu-math-big-parens {
   /* TODO: only works if MARK has no background-image; find better solution */
   background-color:inherit;
}

/* correct usage is as follows:
  
    - first element is a lu-math-raw with text content "("
    - next element is an LI with the top-row content
    - next element is a lu-math-raw with text content " choose "
    - next element is an LI with the bottom-row content
    - next element is a lu-math-raw with the text content ")"
    
   if the top element is an expression, add a "(" to the first lu-math-raw and 
   prepend a ")" to the middle lu-math-raw.
   
   if the bottom element is an expression, add a ")" to the last lu-math-raw and 
   append a "(" to the middle lu-math-raw.
*/
lu-math-binomial-coefficient {
   display:inline-grid;
   grid-template-areas: "a" "b";
   vertical-align:middle;
   margin:0 .3ch;
   
   >li {
      list-style:none;
      padding:0 0;
      margin:0;
   }
}

/* this element can be used to show summation or product notation. correct usage is 
   as follows:
   
    - outermost element is lu-math-sequence, with a data-operation attribute which 
      specifies the operations being used.
      
       - for summation, use "+-"
       - for multiplication, use "*"
       
    - first child is a lu-seq-info element.
    
       - first child is a lu-math-raw element whose text content is the appropriate 
         symbol for the sequence ("&Sigma;" for summation; "&Pi;" for multiplication; 
         these entity names are case-sensitive and lowercase will get you the wrong 
         symbols).
         
       - for fixed bounds, use a child element named lu-math-seq-bounds.
       
          - first child should be a lu-math-raw with text content " for all ", with 
            spaces.
            
          - next, write out the conditions right there.
          
          - finally, a lu-math-raw with text content " do: " or " define: "
       
       - for a condition, use a child element named lu-math-condition.
       
          - first child should bea  lu-math-raw with text content " from ".
          - next, a lu-math-bound-lower element containing the lower bound.
          - next, a lu-math-raw with text content " through ".
          - next, a lu-math-bound-upper element containing the upper bound.
          - finally, a lu-math-raw with text content " do: " or " define: "
    
    - last child is a lu-seq-body element.
    
       - first child should be a lu-math-raw with text content "(".
       - last child should be a lu-math-raw with text content ")".
       
       - use HTML comments to ensure no whitespace between the element start/end and 
         the raw parens, nor between those parens and your content.
         
       - if needed, use the "big-parens" class on this element.
    
    - use HTML comments to ensure no whitespace child nodes.

*/
lu-math-sequence {
   display:inline-block;
   vertical-align:middle;
   
   >lu-math-seq-info {
      display:inline-grid;
      grid-template: "upper  _1  "
                     "symbol body" 1fr
                     "lower  _2  ";
      >lu-math-seq-bounds {
         display: contents;
         
         >lu-math-bound-upper {
            grid-area: upper;
            font-size: smaller;
         }
         >lu-math-bound-lower {
            grid-area: lower;
            font-size: smaller;
         }
      }
      
      /*
         ensure the upper grid area (which is optional) is not empty; required for 
         consistent alignments
      */
      &:not([data-no-params])::after {
         content:"\00A0";
         grid-area: upper;
         pointer-events:none;
      }
      
      &::before {
         font-size:2em;
         grid-area: symbol;
      }
      >lu-math-condition {
         grid-area: lower;
         font-size: smaller;
      }
   }
   >:is(lu-math-seq-info, lu-math-seq-body) {
      vertical-align:middle;
   }
   >lu-math-seq-body {
      display:inline-block;
   }
   
   &[data-operation="+-"]>lu-math-seq-info::before {
      content:"\3A3";
   }
   &[data-operation="*"]>lu-math-seq-info::before {
      content:"\3A0";
   }
}